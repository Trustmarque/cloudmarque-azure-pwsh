trigger:
- master

pool:
  vmImage: windows-latest

variables:
  major: 0
  minor: 0
  version: $(major).$(minor).$(build.buildNumber)
  module: Cloudmarque.Azure
  createArtifacts: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))

stages:
- stage: Build
  displayName: Build Cloudmarque.Azure
  jobs:
  - job: Build
    steps:
    - task: PowerShell@2
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        errorActionPreference: stop
        script: |
          . .\init.ps1
          Sync-CloudmarqueAzure

- stage: Test
  displayName: Test Cloudmarque.Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Test
    steps:
    - task: PowerShell@2
      displayName: Run
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        errorActionPreference: stop
        script: |
          . .\init.ps1
          Test-CloudmarqueAzure
    - task: PublishTestResults@2
      displayName: Publish
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: publish/tests/*.xml
        failTaskOnFailedTests: true

- stage: CreateCloudmarqueAzureArtifact
  displayName: Create Cloudmarque.Azure Artifact
  dependsOn: Test
  condition: and(succeeded(), variables.createArtifacts)
  jobs:
  - job: CreateCloudmarqueAzureArtifact
    steps:
    - task: PowerShell@2
      displayName: Build
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          . .\init.ps1
          Build-CloudmarqueAzure -Version $(version) -Suffix $(PackageSuffix)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: publish/pkg
        ArtifactName: pkg   

- stage: CreateDocumentationArtifact
  displayName: Create Documentation Artifact
  dependsOn: Test
  condition: and(succeeded(), variables.createArtifacts)
  jobs:
  - job: CreateDocumentationArtifact
    steps:
    - task: PowerShell@2
      displayName: Build
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          . .\init.ps1
          New-CloudmarqueAzureDocs
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: publish/docs
        artifactName: docs
        publishLocation: pipeline

- stage: PublishCloudmarqueAzureArtifactToFeed
  displayName: Publish Cloudmarque.Azure Artifact To Feed
  dependsOn: CreateCloudmarqueAzureArtifact
  condition: and(succeeded(), variables.createArtifacts)
  jobs:
  - job: PublishCloudmarqueAzureArtifactToFeed
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download
      inputs:
        buildType: current
        downloadType: single
        artifactName: pkg
        downloadPath: $(Pipeline.Workspace)
    - task: NuGetCommand@2
      displayName: Nuget Push
      inputs:
        command: push
        packagesToPush: $(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg
        nuGetFeedType: internal
        publishVstsFeed: $(VstsFeed)